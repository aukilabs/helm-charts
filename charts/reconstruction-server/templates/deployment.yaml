apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "reconstruction-server.fullname" . }}
  labels:
    {{- include "reconstruction-server.labels" . | nindent 4 }}
spec:
  {{- if .Values.deploymentStrategy.enabled }}
  strategy:
    type: {{ .Values.deploymentStrategy.type }}
  {{- if and (eq .Values.deploymentStrategy.type "RollingUpdate") .Values.deploymentStrategy.rollingUpdate }}
    rollingUpdate:
  {{ toYaml .Values.deploymentStrategy.rollingUpdate | indent 6 }}
  {{- end }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "reconstruction-server.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "reconstruction-server.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "reconstruction-server.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default (print "v" .Chart.AppVersion) }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            {{- range $key, $portSpec := .Values.containerPorts }}
            - name: {{ $key }}
              containerPort: {{ int $portSpec.port }}
              protocol: {{ $portSpec.protocol }}
            {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          env:
            {{- toYaml .Values.extraEnv | nindent 12 }}
          volumeMounts:
            - name: shm
              mountPath: /dev/shm
            - name: jobs
              mountPath: /app/jobs
            - name: home
              mountPath: /home/reconstruction-server
            - name: tmp
              mountPath: /tmp
          args:
            - "--api-key={{ .Values.apiKey }}"
          # TODO: Change to env var + secret, or the reconstruction-server can validate domain access tokens instead
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - name: shm
          emptyDir:
            medium: Memory
            sizeLimit: {{ .Values.shmSizeLimit }}
        - name: jobs
          emptyDir: {}
        - name: home
          emptyDir: {}
        - name: tmp
          emptyDir: {}
