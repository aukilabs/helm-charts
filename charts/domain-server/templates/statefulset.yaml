{{- $secrets := .Values.secrets }}
{{- $dsRegistrationCredentialsFound := false }}
{{- range $secretName, $secretConfig := $secrets }}
  {{- range $secretKey, $keyEnvVarConfig := $secretConfig.items }}
    {{- if eq $keyEnvVarConfig.envVarName "DS_REGISTRATION_CREDENTIALS" }}
      {{- $dsRegistrationCredentialsFound = true }}
    {{- end }}
  {{- end }}
{{- end }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "domain-server.fullname" . }}
  labels:
    {{- include "domain-server.labels" . | nindent 4 }}
spec:
  serviceName: {{ include "domain-server.fullname" . }}
  selector:
    matchLabels:
      {{- include "domain-server.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "domain-server.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.securityContext | nindent 8 }}
      containers:
        - name: {{ .Values.applicationName }}
          image: "{{ .Values.containerImage.repository }}:{{ .Values.containerImage.tag | default (print "v" .Chart.AppVersion) }}"
          imagePullPolicy: {{ .Values.containerImage.pullPolicy | default "IfNotPresent" }}
          ports:
            {{- range $key, $portSpec := .Values.containerPorts }}
            - name: {{ $key }}
              containerPort: {{ int $portSpec.port }}
              protocol: {{ $portSpec.protocol }}
            {{- end }}
          volumeMounts:
            - name: {{ ternary .Values.persistentVolume.statefulSetNameOverride "storage-volume" (and .Values.persistentVolume.enabled (not (empty .Values.persistentVolume.statefulSetNameOverride))) }}
              mountPath: "{{ .Values.persistentVolume.mountPath }}"
              subPath: "{{ .Values.persistentVolume.subPath }}"
          securityContext:
{{ toYaml .Values.containerSecurityContext | indent 12 }}
          resources:
{{ toYaml .Values.containerResources | indent 12 }}
          env:
          {{- range $key, $value := .Values.envVars }}
            - name: {{ $key }}
              value: {{ quote $value }}
          {{- end }}
          {{- if not $dsRegistrationCredentialsFound }}
            # For integration tests to pass
            - name: DS_POSTGRES_URL
              value: "postgres://domain-server:domain-server@domain-server-postgresql:5432/domain-server?sslmode=disable"
            - name: DS_REGISTRATION_CREDENTIALS
              value: MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwOmludmFsaWQ=
            - name: DS_WALLET_PRIVATE_KEY
              value: 0x
          {{- end }}
          {{- range $secretName, $secretConfig := $secrets }}
            {{- range $secretKey, $keyEnvVarConfig := $secretConfig.items }}
            - name: {{ required "envVarName is required on secrets items when using environment or csi" $keyEnvVarConfig.envVarName | quote }}
              valueFrom:
                secretKeyRef:
                  name: {{ $secretName }}
                  key: {{ $secretKey }}
            {{- end }}
          {{- end }}
          volumeMounts:
            - name: private-key-volume
              mountPath: /private-key-volume
              readOnly: true
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    volumes:
    - name: private-key-volume
      secret:
        secretName: {{ include "domain-server.fullname" . }}
        defaultMode: 0400
        items:
        - key: wallet_private_key
          path: wallet-private.key
{{- if .Values.persistentVolume.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: {{ .Values.persistentVolume.statefulSetNameOverride | default "storage-volume" }}
        {{- if .Values.persistentVolume.annotations }}
        annotations:
{{ toYaml .Values.persistentVolume.annotations | indent 10 }}
        {{- end }}
        {{- if .Values.persistentVolume.labels }}
        labels:
{{ toYaml .Values.persistentVolume.labels | indent 10 }}
        {{- end }}
      spec:
        accessModes:
{{ toYaml .Values.persistentVolume.accessModes | indent 10 }}
        resources:
          requests:
            storage: "{{ .Values.persistentVolume.size }}"
      {{- if .Values.persistentVolume.storageClass }}
      {{- if (eq "-" .Values.persistentVolume.storageClass) }}
        storageClassName: ""
      {{- else }}
        storageClassName: "{{ .Values.persistentVolume.storageClass }}"
      {{- end }}
      {{- end }}
{{- else }}
        - name: storage-volume
          emptyDir:
          {{- if .Values.emptyDir.sizeLimit }}
            sizeLimit: {{ .Values.emptyDir.sizeLimit }}
          {{- else }}
            {}
          {{- end -}}
{{- end }}
