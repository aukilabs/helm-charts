containerImage:
  pullPolicy: IfNotPresent
  repository: aukilabs/domain-server
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""
applicationName: domain-server
tolerations:
  - key: "dedicated"
    value: "armGroup"
    effect: "NoSchedule"
containerPorts:
  http:
    port: 8080
    protocol: TCP
  admin:
    port: 18190
    protocol: TCP
service:
  enabled: true
  ports:
    http:
      port: 8080
      targetPort: 8080
      protocol: TCP
    admin:
      port: 18190
      targetPort: 18190
      protocol: TCP
ingress:
  enabled: true
  annotations:
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/group.name: default
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS":443}]'
    alb.ingress.kubernetes.io/healthcheck-port: admin
    alb.ingress.kubernetes.io/healthcheck-path: /health
  path: /
  pathType: Prefix
  servicePort: http
envVars:
  DS_ADDR: ":8080"
  DS_ADMIN_ADDR: ":18190"
  DS_POSTGRES_TRACE_LEVEL: "none"
  DS_PUBLIC_URL: "https://domain-server.example.com"
  DS_LOG_LEVEL: "debug"
  DS_OPERATION_MODE: "public"
  DS_STORAGE_LOCAL_PATH: "./data/domain-data"
secrets:
  domain-server:
    as: environment
    items:
      postgres_url:
        envVarName: DS_POSTGRES_URL
      registration_credentials:
        envVarName: DS_REGISTRATION_CREDENTIALS
  domain-server-volume:
    as: volume
    mountPath: /domain-server-volume
    readOnly: true
    items:
      wallet-private.key:
        filePath: wallet-private.key

containerResources:
  limits:
    memory: 256Mi
  requests:
    memory: 256Mi
    cpu: 1
monitoring:
  namespace: monitoring
  podMonitor:
    create: false
    scrapeInterval: 10s

useExistingSecret: false
existingSecretName: ""
secretFile:
  privateKey: ""
  postgresUrl: "postgres://domain-server:domain-server@domain-server-postgresql:5432/domain-server?sslmode=disable"
  registrationCredentials: "MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwOmludmFsaWQ="

persistentVolume:
  ## If true, create/use a Persistent Volume Claim
  ## If false, use emptyDir
  ##
  enabled: true

  ## If set it will override the name of the created persistent volume claim
  ## generated by the stateful set.
  ##
  statefulSetNameOverride: ""

  ## Persistent Volume access modes
  ## Must match those of existing PV or dynamic provisioner
  ## Ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
  ##
  accessModes:
    - ReadWriteOnce

  ## Persistent Volume labels
  ##
  labels: {}

  ## Persistent Volume annotations
  ##
  annotations: {}

  ## Persistent Volume existing claim name
  ## Requires server.persistentVolume.enabled: true
  ## If defined, PVC must be created manually before volume will be bound
  existingClaim: ""

  ## Persistent Volume size
  ##
  size: 20Gi

  ## Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  # storageClass: "-"

  ## Persistent Volume Binding Mode
  ## If defined, volumeBindingMode: <volumeBindingMode>
  ## If undefined (the default) or set to null, no volumeBindingMode spec is
  ##   set, choosing the default mode.
  ##
  # volumeBindingMode: ""

  ## Path Persistent Volume to mount
  mountPath: "/app/data/domain-data"
  subPath: ""

  ## Persistent Volume Claim Selector
  ## Useful if Persistent Volumes have been provisioned in advance
  ## Ref: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#selector
  ##
  # selector:
  #  matchLabels:
  #    release: "stable"
  #  matchExpressions:
  #    - { key: environment, operator: In, values: [ dev ] }

  ## Persistent Volume Name
  ## Useful if Persistent Volumes have been provisioned in advance and you want to use a specific one
  ##
  # volumeName: ""

postgresql:
  # If true, the PostgreSQL dependency is enabled
  enabled: true
  global:
    postgresql:
      auth:
        username: domain-server
        password: domain-server
        database: domain-server
  primary:
    networkPolicy:
      enabled: false
  fullnameOverride: "domain-server-postgresql"

securityContext:
  fsGroup: 101
  runAsGroup: 101
  runAsUser: 100
