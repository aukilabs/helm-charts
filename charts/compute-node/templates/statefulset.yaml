{{- if .Values.server.enabled }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "compute-node.serverStatefulSetName" . }}
  labels:
    {{- include "compute-node.nodeLabels" . | nindent 4 }}
spec:
  serviceName: {{ include "compute-node.serverServiceName" . }}
  replicas: {{ .Values.server.replicas }}
  selector:
    matchLabels:
      {{- include "compute-node.nodeSelectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: compute-node
  template:
    metadata:
      labels:
        {{- include "compute-node.nodeSelectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: compute-node
    spec:
      {{- if .Values.serviceAccount.create }}
      serviceAccountName: {{ include "compute-node.serviceAccountName" . }}
      {{- end }}
      {{- if .Values.server.tolerations }}
      tolerations:
        {{- toYaml .Values.server.tolerations | nindent 8 }}
      {{- end }}
      containers:
      {{- if .Values.extraContainers }}
      {{- toYaml .Values.extraContainers | nindent 6 }}
      {{- end }}
      - name: server
        securityContext:
          fsGroup: 101
          runAsGroup: 101
          runAsUser: 100
        image: "{{ .Values.server.image.repository }}:{{ .Values.server.image.tag }}"
        imagePullPolicy: {{ .Values.server.image.pullPolicy }}
        ports:
        - name: http
          containerPort: {{ .Values.server.ports.main }}
          protocol: TCP
        - name: admin
          containerPort: {{ .Values.server.ports.admin }}
          protocol: TCP
        env:
        {{- range $key, $value := .Values.server.env }}
        - name: {{ $key }}
          value: {{ $value | quote }}
        {{- end }}
        envFrom:
        - configMapRef:
            name: {{ include "compute-node.configMapName" . }}
        - secretRef:
            name: {{ include "compute-node.secretName" . }}
        resources:
          {{- toYaml .Values.server.resources | nindent 10 }}
        volumeMounts:
        - name: data
          mountPath: {{ .Values.storage.mountPath }}
        {{- if .Values.server.enableProbes }}
        livenessProbe:
          httpGet:
            path: /health
            port: admin
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: admin
          initialDelaySeconds: 5
          periodSeconds: 5
        {{- end }}
      - name: worker
        image: "{{ .Values.worker.image.repository }}:{{ .Values.worker.image.tag }}"
        imagePullPolicy: {{ .Values.worker.image.pullPolicy }}
        securityContext:
          fsGroup: 101
          runAsGroup: 101
          runAsUser: 100
        ports:
        - name: worker-http
          containerPort: {{ .Values.worker.ports.main }}
          protocol: TCP
        env:
        {{- range $key, $value := .Values.worker.env }}
        - name: {{ $key }}
          value: {{ $value | quote }}
        {{- end }}
        envFrom:
        - configMapRef:
            name: {{ include "compute-node.configMapName" . }}
        - secretRef:
            name: {{ include "compute-node.secretName" . }}
        resources:
          {{- toYaml .Values.worker.resources | nindent 10 }}
        volumeMounts:
        - name: data
          mountPath: {{ .Values.storage.mountPath }}
        {{- if .Values.worker.enableProbes }}
        livenessProbe:
          httpGet:
            path: /health
            port: worker-http
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: worker-http
          initialDelaySeconds: 5
          periodSeconds: 5
        {{- end }}
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: {{ include "compute-node.storageVolumeName" . }}
{{- end }}
